{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/python/python-decorators/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Python decorator\",\n  \"tags\": [\"python\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"what-is-a-decorator\"\n  }, \"What is a decorator?\"), mdx(\"p\", null, \"A decorator is a function that takes a function and extends its functionality without modifying it explicitly \\uD83E\\uDD2F\"), mdx(\"p\", null, \"Simply giving a function some super powers.\"), mdx(\"h2\", {\n    \"id\": \"decorator-example\"\n  }, \"Decorator example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"def my_decorator(func):\\n    def wrapper():\\n        print(\\\"First\\\")\\n        func()\\n        print(\\\"Last\\\")\\n    return wrapper\\n\\n@my_decorator\\ndef say_hello():\\n    print(\\\"Hello I am line Number 2\\\")\\n\\nsay_hello()\\n# First\\n# Hello I am line Number 2\\n# Last\\n\")), mdx(\"h2\", {\n    \"id\": \"understand-how-decorator-works\"\n  }, \"Understand how decorator works\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"def my_decorator(func):\\n    def wrapper():\\n        print(\\\"First\\\")\\n        func()\\n        print(\\\"Last\\\")\\n    return wrapper\\n\\ndef say_hello():\\n    print(\\\"Hello I am line Number 2\\\")\\n\")), mdx(\"p\", null, \"Here,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We declare a decorator function and it takes a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"function as argument\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inside that, we write a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"wrapper function\"), \" where operations are carried out and return the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"wrapper function\"), \" itself.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"say_hello_with_decorator = my_decorator(say_hello)\\nsay_hello_with_decorator()\\n\\n# First\\n# Hello I am line Number 2\\n# Last\\n\")), mdx(\"h2\", {\n    \"id\": \"uses-of-decorator\"\n  }, \"Uses of decorator\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup logger\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setup Error catching\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extending common functionality for all function and classes\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python decorator","tags":["python"],"emoji":null,"link":null},"fields":{"dateModified":"Jul 25, 2020 18:06 PM","modifiedTimestamp":"2020-07-25T18:06:13.000Z","slug":"/python/python-decorators/"},"tableOfContents":{"items":[{"url":"#what-is-a-decorator","title":"What is a decorator?"},{"url":"#decorator-example","title":"Decorator example"},{"url":"#understand-how-decorator-works","title":"Understand how decorator works"},{"url":"#uses-of-decorator","title":"Uses of decorator"}]},"parent":{"__typename":"File","relativePath":"python/python-decorators.md"}}},"pageContext":{"id":"c08db976-93cc-53ec-b745-18965bad5f41","previous":{"id":"83fde564-b1ad-5c7c-a16c-a29b49f61606","frontmatter":{"title":"Colorize Your Black and White Old Photos","tags":["resource"]},"fields":{"slug":"/resource/colorize-black-and-white-photos/","dateModified":"2020-07-25T18:06:13.000Z"}},"next":{"id":"f9920989-a81f-5423-8681-caabbba178ce","frontmatter":{"title":"Lambda function","tags":["python"]},"fields":{"slug":"/python/lambda-function/","dateModified":"2020-07-25T18:06:13.000Z"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}