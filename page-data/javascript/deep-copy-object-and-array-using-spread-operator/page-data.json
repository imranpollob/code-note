{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/javascript/deep-copy-object-and-array-using-spread-operator/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Deep copy object and array using spread operator\",\n  \"tags\": [\"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"what-is-swallow-copy-vs-deep-copy\"\n  }, \"What is swallow copy vs deep copy?\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"deep copy\"), \" means that all of the values of the new variable are copied and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"disconnected\"), \" from the original variable. \"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"shallow copy\"), \" means that certain (sub-)values are still \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"connected\"), \" to the original variable.\"), mdx(\"h2\", {\n    \"id\": \"when-swallow-copy-is-created\"\n  }, \"When swallow copy is created?\"), mdx(\"p\", null, \"To really understand copying, you have to get into how JavaScript stores values.\"), mdx(\"h3\", {\n    \"id\": \"primitive-data-types\"\n  }, \"Primitive data types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Number \\u2014 e.g. 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"String \\u2014 e.g. 'Hello'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Boolean \\u2014 e.g. true\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"undefined\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"null\")), mdx(\"p\", null, \"When you create these values, they are tightly coupled with the variable they are assigned to. They only exist once. \"), mdx(\"p\", null, \"That means you do not really have to worry about copying primitive data types in JavaScript. When you make a copy, it will be a real copy.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let a = 5\\n\\nlet b = a // this is the copy\\n\\nb = 6\\n\\nconsole.log(b) // 6\\nconsole.log(a) // 5\\n\")), mdx(\"h3\", {\n    \"id\": \"composite-data-types\"\n  }, \"Composite data types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Array\")), mdx(\"p\", null, \"Technically, arrays are also objects, so they behave in the same way. These values are actually stored just once when instantiated, and assigning a variable just creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pointer (reference)\"), \" to that value.\"), mdx(\"p\", null, \"Now, if we make a copy \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b = a\"), \" , and change some nested value in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \", it actually changes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \"\\u2019s nested value as well \\uD83E\\uDD2F\"), mdx(\"p\", null, \"Why? Because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" actually point to the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reference\"), \". It's called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"swallow copy\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let a = { name: 'Pollob' }\\nlet b = a\\n\\nconsole.log(b) // { name: 'Pollob' }\\n\\nb.name = \\\"Something ..\\\"\\n\\nconsole.log(a) // { name: 'Something ..' }\\n\")), mdx(\"h2\", {\n    \"id\": \"deep-copy-to-rescue\"\n  }, \"Deep copy to rescue\"), mdx(\"h3\", {\n    \"id\": \"deep-copy-object\"\n  }, \"Deep copy object\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bad\\nconst old = { a: 1, b: 2 };\\nconst copy = Object.assign({}, old); // copy => { a: 1, b: 2 }\\n// adding additional value\\nconst copy = Object.assign({}, old, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\\n\\n\\n// good\\nconst old = { a: 1, b: 2 };\\nconst copy = { ...old }; // copy => { a: 1, b: 2 }\\n// adding additional value\\nconst copy = { ...old, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\\n\\nconst { a, ...args } = copy; // args => { b: 2, c: 3 }\\n\")), mdx(\"h3\", {\n    \"id\": \"deep-copy-array\"\n  }, \"Deep copy array\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bad\\nconst items = [1,2,3,4,5]\\nconst len = items.length;\\nlet itemsCopy = [];\\nlet i;\\n\\nfor (i = 0; i < len; i += 1) {\\n  itemsCopy[i] = items[i];\\n}\\n\\n// bad\\nitemsCopy = items.slice();\\n\\n// bad\\nitemsCopy = new Array(items)\\n\\n// good\\nconst itemsCopy = [...items];\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Deep copy object and array using spread operator","tags":["javascript"],"emoji":null,"link":null},"fields":{"dateModified":"Jul 24, 2020 5:07 AM","modifiedTimestamp":"2020-07-24T05:07:45.000Z","slug":"/javascript/deep-copy-object-and-array-using-spread-operator/"},"tableOfContents":{"items":[{"url":"#what-is-swallow-copy-vs-deep-copy","title":"What is swallow copy vs deep copy?"},{"url":"#when-swallow-copy-is-created","title":"When swallow copy is created?","items":[{"url":"#primitive-data-types","title":"Primitive data types:"},{"url":"#composite-data-types","title":"Composite data types:"}]},{"url":"#deep-copy-to-rescue","title":"Deep copy to rescue","items":[{"url":"#deep-copy-object","title":"Deep copy object"},{"url":"#deep-copy-array","title":"Deep copy array"}]}]},"parent":{"__typename":"File","relativePath":"javascript/deep-copy-object-and-array-using-spread-operator.md"}}},"pageContext":{"id":"34a30c74-a9cc-5ea4-a7e6-35a00eb7ba01","previous":{"id":"cd99480b-8edb-54ab-967d-40523f07b284","frontmatter":{"title":"Use let and const instead of var to assign variable","tags":["javascript"]},"fields":{"slug":"/javascript/use-let-and-const-instead-of-var/","dateModified":"2020-07-24T05:07:45.000Z"}},"next":{"id":"09ba0f5c-4d77-5bf0-a9c4-9ad852049cca","frontmatter":{"title":"Closures - the dead alive!!","tags":["javascript"]},"fields":{"slug":"/javascript/closures-the-dead-alive/","dateModified":"2020-07-24T05:07:45.000Z"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}