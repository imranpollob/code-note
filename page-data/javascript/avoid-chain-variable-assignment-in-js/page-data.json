{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/javascript/avoid-chain-variable-assignment-in-js/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Avoid chain variable assignments in JavaScript\",\n  \"tags\": [\"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Chaining variable assignments may seem fancy but have unintended consequences associated with it. During chaining of variable assignments, implicit global variables are created which results in polluting the global namespace.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bad\\n(function example() {\\n  let x = y = z = 1;\\n  // JavaScript interprets this as\\n  // let x = ( y = ( z = 1 ) );\\n  // The let keyword only applies to variable x, variables y and z become\\n  // global variables and thus polluting global namespace.\\n}());\\n\\nconsole.log(x); // throws ReferenceError\\nconsole.log(y); // 1\\nconsole.log(y); // 1\\n\\n// good\\n(function example() {\\n  let x = 1;\\n  let y = x;\\n  let z = y;\\n}());\\n\\nconsole.log(x); // throws ReferenceError\\nconsole.log(y); // throws ReferenceError\\nconsole.log(z); // throws ReferenceError\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Avoid chain variable assignments in JavaScript","tags":["javascript"],"emoji":null,"link":null},"fields":{"dateModified":"Jul 23, 2020 6:28 AM","modifiedTimestamp":"2020-07-23T06:28:35.000Z","slug":"/javascript/avoid-chain-variable-assignment-in-js/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"javascript/avoid-chain-variable-assignment-in-js.md"}}},"pageContext":{"id":"134b8048-b458-5ce0-9d30-63671743ceab","previous":{"id":"09ba0f5c-4d77-5bf0-a9c4-9ad852049cca","frontmatter":{"title":"Closures - the dead alive!!","tags":["javascript"]},"fields":{"slug":"/javascript/closures-the-dead-alive/","dateModified":"2020-07-23T06:28:35.000Z"}},"next":{"id":"0bb7d365-6a50-5548-9891-4163f1b97c54","frontmatter":{"title":"Remove commit from remote","tags":["git"]},"fields":{"slug":"/git/remove-commit-from-remote/","dateModified":"2020-07-23T06:28:35.000Z"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}