{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/javascript/closures-the-dead-alive/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Closures - the dead alive!!\",\n  \"tags\": [\"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"closure-is-a-pattern\"\n  }, \"Closure is a pattern\"), mdx(\"p\", null, \"Closure is an important javascript pattern to give private access to a variable. \"), mdx(\"p\", null, \"A closure gives you access to an outer function\\u2019s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\"), mdx(\"p\", null, \"For below example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createGreeter\"), \" returns an anonymous function that has access to the supplied \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greeting\"), \", \\u201CHello.\\u201D For all future uses, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sayHello\"), \" will have access to this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greeting\"), \"!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function createGreeter(greeting) {\\n    return function(name) {\\n        console.log(greeting + ', ' + name);\\n    };\\n}\\n\\nconst sayHello = createGreeter('Hello');\\n\\nsayHello('Joe');\\n// Hello, Joe\\n\")), mdx(\"h2\", {\n    \"id\": \"private-variable\"\n  }, \"Private variable\"), mdx(\"p\", null, \"This lets us do some interesting things, such as defining \\\"private\\\" variables that are visible only to a specific function or set of functions. A contrived (but popular) example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function makeCounter() {\\n    var counter = 0;\\n\\n    return {\\n        value: function () {\\n            return counter;\\n        },\\n        increment: function () {\\n            counter++;\\n        }\\n    };\\n}\\n\\nvar a = makeCounter();\\nvar b = makeCounter();\\n\\na.increment();\\n\\nconsole.log(a.value()); // 1\\nconsole.log(b.value()); // 0\\n\")), mdx(\"h2\", {\n    \"id\": \"real-world-example\"\n  }, \"Real world example\"), mdx(\"p\", null, \"In a more real-world scenario, you could envision an initial function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apiConnect(apiKey)\"), \" that returns some methods that would use the API key. \"), mdx(\"p\", null, \"In this case, the apiKey would just need to be provided \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"once and never again\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function apiConnect(apiKey) {\\n    function get(route) {\\n        return fetch(`${route}?key=${apiKey}`);\\n    }\\n\\n    function post(route, params) {\\n        return fetch(route, {\\n            method: 'POST',\\n            body: JSON.stringify(params),\\n            headers: {\\n                Authorization: `Bearer ${apiKey}`\\n            }\\n        });\\n    }\\n\\n    return { get, post };\\n}\\n\\nconst api = apiConnect('my-secret-key');\\n\\n// No need to include the apiKey anymore\\napi.get('http://www.example.com/get-endpoint');\\napi.post('http://www.example.com/post-endpoint', { name: 'Joe' });\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Closures - the dead alive!!","tags":["javascript"],"emoji":null,"link":null},"fields":{"dateModified":"Jul 29, 2020 9:55 AM","modifiedTimestamp":"2020-07-29T09:55:55.000Z","slug":"/javascript/closures-the-dead-alive/"},"tableOfContents":{"items":[{"url":"#closure-is-a-pattern","title":"Closure is a pattern"},{"url":"#private-variable","title":"Private variable"},{"url":"#real-world-example","title":"Real world example"}]},"parent":{"__typename":"File","relativePath":"javascript/closures-the-dead-alive.md"}}},"pageContext":{"id":"09ba0f5c-4d77-5bf0-a9c4-9ad852049cca","previous":{"id":"34a30c74-a9cc-5ea4-a7e6-35a00eb7ba01","frontmatter":{"title":"Deep copy object and array using spread operator","tags":["javascript"]},"fields":{"slug":"/javascript/deep-copy-object-and-array-using-spread-operator/","dateModified":"2020-07-29T09:55:55.000Z"}},"next":{"id":"134b8048-b458-5ce0-9d30-63671743ceab","frontmatter":{"title":"Avoid chain variable assignments in JavaScript","tags":["javascript"]},"fields":{"slug":"/javascript/avoid-chain-variable-assignment-in-js/","dateModified":"2020-07-29T09:55:55.000Z"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}