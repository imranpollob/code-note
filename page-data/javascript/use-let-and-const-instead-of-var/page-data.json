{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/javascript/use-let-and-const-instead-of-var/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use let and const instead of var to assign variable\",\n  \"tags\": [\"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"scope-matters\"\n  }, \"Scope matters\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const\"), \" have block scope while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" has function scope which could lead to some bugs in your code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bad\\n{\\n  var result = 1;\\n}\\nconsole.log(result) // 1\\n\\n// good, use the let.\\n{\\n  let result = 1;\\n}\\nconsole.log(result) // Reference Error\\n\")), mdx(\"h2\", {\n    \"id\": \"use-const-instead-of-let-when-you-dont-have-to-reassign-values\"\n  }, \"Use const instead of let when you don't have to reassign values\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If a variable is never reassigned, using the const declaration is better. The const declaration tells readers, \\\"this variable is never reassigned,\\\" reducing cognitive load and improving maintainability. - Eslint\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//bad\\nlet baseUrl = 'https://test.com/'\\n\\n//good\\nconst baseUrl = 'https://test.com/'\\n\")), mdx(\"h2\", {\n    \"id\": \"stay-away-from-creating-global-scope-variable\"\n  }, \"Stay away from creating global scope variable\"), mdx(\"p\", null, \"Always use const or let to declare variables. Not doing so will result in variables declared in the global scope and polluting global namespace.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bad\\nfox = new Animal();\\nwindow.fox // animal (if browser environment)\\n\\n// good\\nconst fox = new Animal();\\nwindow.fox // undefined (if browser environment)\\n\")), mdx(\"h2\", {\n    \"id\": \"dont-chain-variable-assignments\"\n  }, \"Don\\u2019t chain variable assignments\"), mdx(\"p\", null, \"During chaining of variable assignments, implicit global variables are created which results in polluting the global namespace.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bad\\n(function example() {\\n  let x = y = z = 1;\\n  // JavaScript interprets this as\\n  // let x = ( y = ( z = 1 ) );\\n  // The let keyword only applies to variable x, variables y and z become\\n  // global variables and thus polluting global namespace.\\n}());\\n\\nconsole.log(x); // throws ReferenceError\\nconsole.log(y); // 1\\nconsole.log(y); // 1\\n\\n// good\\n(function example() {\\n  let x = 1;\\n  let y = x;\\n  let z = y;\\n}());\\n\\nconsole.log(x); // throws ReferenceError\\nconsole.log(y); // throws ReferenceError\\nconsole.log(z); // throws ReferenceError\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Use let and const instead of var to assign variable","tags":["javascript"],"emoji":null,"link":null},"fields":{"dateModified":"Jun 28, 2021 5:04 AM","modifiedTimestamp":"2021-06-28T05:04:44.000Z","slug":"/javascript/use-let-and-const-instead-of-var/"},"tableOfContents":{"items":[{"url":"#scope-matters","title":"Scope matters"},{"url":"#use-const-instead-of-let-when-you-dont-have-to-reassign-values","title":"Use const instead of let when you don't have to reassign values"},{"url":"#stay-away-from-creating-global-scope-variable","title":"Stay away from creating global scope variable"},{"url":"#dont-chain-variable-assignments","title":"Donâ€™t chain variable assignments"}]},"parent":{"__typename":"File","relativePath":"javascript/use-let-and-const-instead-of-var.md"}}},"pageContext":{"id":"cd99480b-8edb-54ab-967d-40523f07b284","previous":{"id":"31bb071e-ed72-5901-83e0-1124f4383dd4","frontmatter":{"title":"Use object and array destructuring","tags":["javascript"]},"fields":{"slug":"/javascript/use-object-and-array-destructuring/","dateModified":"2021-06-28T05:04:44.000Z"}},"next":{"id":"34a30c74-a9cc-5ea4-a7e6-35a00eb7ba01","frontmatter":{"title":"Deep copy object and array using spread operator","tags":["javascript"]},"fields":{"slug":"/javascript/deep-copy-object-and-array-using-spread-operator/","dateModified":"2021-06-28T05:04:44.000Z"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}